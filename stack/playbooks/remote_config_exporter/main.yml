---
- name: Get config information from remote
  hosts: all
  become: no
  gather_facts: no
  tasks:
    - name: Get Project folder and local_host
      ansible.builtin.set_fact:
        project_folder: "{{ lookup('env', 'PROJECT_FOLDER') }}"
        local_host: "{{ lookup('env', 'LOCAL_HOST') }}"

    - name: Delegate local_host to localhost
      ansible.builtin.set_fact:
        local_host: "{{ lookup('env', 'LOCAL_HOST') }}"
      delegate_facts: yes
      delegate_to: localhost

    - debug:
        msg: "Lookup slm config at {{ project_folder }}"

    - name: Assert Input Parameter
      ansible.builtin.assert:
        that:
          - (project_folder is defined) and (project_folder | length > 0)

    - name: Set abs path to slm config file
      ansible.builtin.set_fact:
        remote_slm_config_folder: "{{ project_folder }}\\_config_generated"
        remote_slm_kc_config_folder: "{{ project_folder }}\\_config_generated\\keycloak"
        remote_slm_config_file_abs_path: "{{ project_folder }}\\_config_generated\\slm-config.yml"

    - name: Get stat of slm config file
      ansible.windows.win_stat:
        path: "{{ remote_slm_config_file_abs_path }}"
      register: config_file

    - name: Assert slm config file is available
      ansible.builtin.assert:
        that:
          - config_file.stat.exists

    - name: Lookup content of remote slm config
      ansible.builtin.slurp:
        src: "{{ remote_slm_config_file_abs_path }}"
      register: slurp_config_file

    - name: "Lookup content of remote {{ service }} keycloak file"
      ansible.builtin.slurp:
        src: "{{ remote_slm_kc_config_folder }}\\{{ service }}\\fabos-keycloak.json"
      register: slurp_kc_config_ns
      vars:
        service: notification-service

    - name: "Lookup content of remote {{ service }} keycloak file"
      ansible.builtin.slurp:
        src: "{{ remote_slm_kc_config_folder }}\\{{ service }}\\fabos-keycloak.json"
      register: slurp_kc_config_rm
      vars:
        service: resource-management

    - name: "Lookup content of remote {{ service }} keycloak file"
      ansible.builtin.slurp:
        src: "{{ remote_slm_kc_config_folder }}\\{{ service }}\\fabos-keycloak.json"
      register: slurp_kc_config_sm
      vars:
        service: service-management

    - name: Save slurp to fact
      ansible.builtin.set_fact:
        remote_slm_config: "{{ slurp_config_file['content'] | b64decode | from_yaml }}"
        remote_kc_config_ns: "{{ slurp_kc_config_ns['content'] | b64decode | from_json }}"
        remote_kc_config_rm: "{{ slurp_kc_config_rm['content'] | b64decode | from_json }}"
        remote_kc_config_sm: "{{ slurp_kc_config_sm['content'] | b64decode | from_json }}"
      delegate_facts: yes
      delegate_to: localhost

- name: Replace local config with config from remote
  hosts: localhost
  become: no
  gather_facts: yes
  tasks:
    - name: Set target_host / remote_host
      ansible.builtin.set_fact:
        target_host: "{{ hostvars[groups['target'] | first].ansible_host }}"
        remote_host: "{{ hostvars[groups['target'] | first].ansible_host }}"

    - name: Set facts for application.yml templates
      ansible.builtin.set_fact:
        keycloak_auth_server_url: "http://{{ remote_host }}:7080/auth"
        awx_scheme:     "{{ remote_slm_config.awx.url | urlsplit('scheme') }}"
        awx_hostname:   "{{ remote_host }}"
        awx_port:       "{{ remote_slm_config.awx.url | urlsplit('port') }}"
        awx_notification_service_username:  "{{ remote_slm_config.awx.users['notification-service'].username }}"
        awx_notification_service_password:  "{{ remote_slm_config.awx.users['notification-service'].password }}"
        awx_resource_management_username:   "{{ remote_slm_config.awx.users['resource-management'].username }}"
        awx_resource_management_password:   "{{ remote_slm_config.awx.users['resource-management'].password }}"
        awx_service_management_username:    "{{ remote_slm_config.awx.users['service-management'].username }}"
        awx_service_management_password:    "{{ remote_slm_config.awx.users['service-management'].password }}"

        consul_scheme:                      "{{ remote_slm_config.consul.url | urlsplit('scheme') }}"
        consul_hostname:                    "{{ remote_host }}"
        consul_port:                        "{{ remote_slm_config.consul.url | urlsplit('port') }}"
        consul_master_token:                "{{ remote_slm_config.consul.master_token }}"
        consul_resource_management_token:   "{{ remote_slm_config.consul.tokens['resource-management'] }}"
        consul_service_management_token:    "{{ remote_slm_config.consul.tokens['service-management'] }}"

        vault_scheme:         "{{ remote_slm_config.vault.url | urlsplit('scheme') }}"
        vault_hostname:       "{{ remote_host }}"
        vault_port:           "{{ remote_slm_config.vault.url | urlsplit('port') }}"
        vault_root_token:     "{{ remote_slm_config.vault.root_token }}"
        vault_resource_management_app_role_id:    "{{ remote_slm_config.vault['app-roles']['resource-management']['role-id'] }}"
        vault_resource_management_app_secret_id:  "{{ remote_slm_config.vault['app-roles']['resource-management']['secret-id'] }}"
        vault_service_management_app_role_id:     "{{ remote_slm_config.vault['app-roles']['service-management']['role-id'] }}"
        vault_service_management_app_secret_id:   "{{ remote_slm_config.vault['app-roles']['service-management']['secret-id'] }}"

        resource_management_scheme: "{{ remote_slm_config['resource-management'].url | urlsplit('scheme') }}"
        resource_management_host:   "{{ remote_host }}"
        resource_management_port:   "{{ remote_slm_config['resource-management'].url | urlsplit('port') }}"
        resource_management_database_host:      "{{ remote_host }}"
        resource_management_database_user:      "{{ remote_slm_config['resource-management'].database.username  }}"
        resource_management_database_password:  "{{ remote_slm_config['resource-management'].database.password  }}"
        resource_management_database_schema:    "{{ remote_slm_config['resource-management'].database.schema  }}"

        service_management_scheme:  "{{ remote_slm_config['service-management'].url | urlsplit('scheme') }}"
        service_management_host:    "{{ remote_host }}"
        service_management_port:    "{{ remote_slm_config['service-management'].url | urlsplit('port') }}"
        service_management_database_host:       "{{ remote_host }}"
        service_management_database_user:       "{{ remote_slm_config['service-management'].database.username }}"
        service_management_database_password:   "{{ remote_slm_config['service-management'].database.password }}"
        service_management_database_schema:     "{{ remote_slm_config['service-management'].database.schema }}"

        notification_service_scheme:  "{{ remote_slm_config['notification-service'].url | urlsplit('scheme') }}"
        notification_service_host:    "{{ remote_host }}"
        notification_service_port:    "{{ remote_slm_config['notification-service'].url | urlsplit('port') }}"
        notification_service_database_host:       "{{ remote_host }}"
        notification_service_database_user:       "{{ remote_slm_config['notification-service'].database.username }}"
        notification_service_database_password:   "{{ remote_slm_config['notification-service'].database.password }}"
        notification_service_database_schema:     "{{ remote_slm_config['notification-service'].database.schema }}"

        catalog_service_scheme:   "{{ remote_slm_config.catalog.url | urlsplit('scheme') }}"
        catalog_service_host:     "{{ remote_host }}"
        catalog_service_port:     "{{ remote_slm_config.catalog.url | urlsplit('port') }}"
        catalog_service_database_host:      "{{ remote_host }}"
        catalog_service_database_user:      "{{ remote_slm_config.catalog.database.username }}"
        catalog_service_database_password:  "{{ remote_slm_config.catalog.database.password }}"
        catalog_service_database_schema:    "{{ remote_slm_config.catalog.database.schema }}"

        monitoring_service_scheme:  "{{ remote_slm_config.monitoring.url | urlsplit('scheme') }}"
        monitoring_service_host:    "{{ remote_host }}"
        monitoring_service_port:    "{{ remote_slm_config.monitoring.url | urlsplit('port') }}"

    - ansible.builtin.set_fact:
        awx_url: "{{awx_scheme}}://{{awx_hostname}}:{{awx_port}}"
        resource_management_url: "{{resource_management_scheme}}://{{resource_management_host}}:{{resource_management_port}}"
        service_management_url: "{{service_management_scheme}}://{{service_management_host}}:{{service_management_port}}"
        notification_service_url: "{{notification_service_scheme}}://{{notification_service_host}}:{{notification_service_port}}"
        catalog_service_url: "{{catalog_service_scheme}}://{{catalog_service_host}}:{{catalog_service_port}}"
        monitoring_service_url: "{{monitoring_service_scheme}}://{{monitoring_service_host}}:{{monitoring_service_port}}"

    - name: "Copy application properties"
      ansible.builtin.template:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
      with_items:
        - src: /templates/notification-service/application.yml
          dest: /project/notification_service/notification_service.service/notification_service.service.rest/src/main/resources/application.yml
        - src: /templates/resource-management/application.yml
          dest: /project/resource_management/resource_management.service/resource_management.service.rest/src/main/resources/application.yml
        - src: /templates/resource-management-initializer/application.yml
          dest: /project/resource_management/resource_management.service/resource_management.service.initializer/src/main/resources/application.yml
        - src: /templates/service-management/application.yml
          dest: /project/service_management/service_management.service/service_management.service.rest/src/main/resources/application.yml
        - src: /templates/service-management-initializer/application.yml
          dest: /project/service_management/service_management.service/service_management.service.initializer/src/main/resources/application.yml
        - src: /templates/catalog/application.yml
          dest: /project/catalog/catalog.service/catalog.service.app/src/main/resources/application.yml
        - src: /templates/ui/.env
          dest: /project/ui/.env

    - name: Replace keycloak auth server url in service configs
      ansible.builtin.set_fact:
        remote_kc_config_ns: "{{ remote_kc_config_ns | combine({'auth-server-url': keycloak_auth_server_url}) }}"
        remote_kc_config_rm: "{{ remote_kc_config_rm | combine({'auth-server-url': keycloak_auth_server_url}) }}"
        remote_kc_config_sm: "{{ remote_kc_config_sm | combine({'auth-server-url': keycloak_auth_server_url}) }}"

    - name: "Copy Keycloak configs to project"
      ansible.builtin.copy:
        content: "{{ item.content }}"
        dest: "{{ item.dest }}/{{ filename }}"
      with_items:
        - content: "{{ remote_kc_config_ns }}"
          dest: /project/notification_service/notification_service.service/notification_service.service.rest/src/main/resources/keycloak
        - content: "{{ remote_kc_config_rm }}"
          dest: /project/resource_management/resource_management.service/resource_management.service.rest/src/main/resources/keycloak
        - content: "{{ remote_kc_config_sm }}"
          dest: /project/service_management/service_management.service/service_management.service.rest/src/main/resources/keycloak
      vars:
        filename: "fabos-keycloak.json"
